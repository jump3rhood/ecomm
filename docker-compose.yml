services:
  mysql:
    image: mysql:8.0
    container_name: mysql
    environment:
      MYSQL_ROOT_PASSWORD: password
      MYSQL_DATABASE: productservice
    volumes:
      - mysql_data:/var/lib/mysql
    ports:
      - "3307:3306"  # Host:Container
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-ppassword"]
      interval: 5s
      timeout: 10s
      retries: 10
    networks:
      - backend

  redis:
    image: redis
    container_name: my-redis
    ports:
      - "6379:6379"
    networks:
      - backend

  productservice:
    build:
      context: ./product-service
      dockerfile: Dockerfile
    container_name: productservice
    ports:
      - "8081:8081"
    depends_on:
      mysql:
        condition: service_healthy
      redis:
        condition: service_started
    environment:
      DB_HOST: mysql
      DB_PORT: 3306
      DB_USER: root
      DB_PASSWORD: password
      REDIS_HOST: my-redis
    networks:
      - backend
  postgres-user:
    image: postgres:15
    container_name: postgres-user
    environment:
      POSTGRES_DB: authserver
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: root
    ports:
      - "5432:5432"
    volumes:
      - postgres_user_data:/var/lib/postgresql/data
    networks:
      - backend
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres -d authserver" ]
      interval: 5s
      timeout: 5s
      retries: 5

  user-service:
    build:
      context:  ./user-service
      dockerfile: Dockerfile
    container_name: user-service
    ports:
      - "8080:8080"
    depends_on:
      postgres-user:
        condition: service_healthy
    environment:
      DATABASE_URL: jdbc:postgresql://postgres-user:5432/authserver
      DATABASE_USERNAME: postgres
      DATABASE_PASSWORD: root
      KEYSTORE_PASSWORD: password
      GOOGLE_CLIENT_ID: ${GOOGLE_CLIENT_ID}
      GOOGLE_CLIENT_SECRET: ${GOOGLE_CLIENT_SECRET}
    networks:
      - backend

  payment-service:
    build:
      context: ./payment-service
      dockerfile: Dockerfile
    container_name: payment-service
    ports:
      - "8082:8082"
    environment:
      STRIPE_KEY: ${STRIPE_KEY}
    networks:
      - backend

volumes:
  mysql_data:
  postgres_user_data:

networks:
  backend:
    driver: bridge
