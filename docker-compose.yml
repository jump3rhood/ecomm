services:
  mysql:
    image: mysql:8.0
    container_name: product-service-db
    environment:
      MYSQL_ROOT_PASSWORD: password
      MYSQL_DATABASE: productservice
    volumes:
      - mysql_data:/var/lib/mysql
    ports:
      - "3307:3306"  # Host:Container
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-ppassword"]
      interval: 5s
      timeout: 10s
      retries: 10
    networks:
      - backend

  redis:
    image: redis
    container_name: my-product-service-redis
    ports:
      - "6379:6379"
    networks:
      - backend

  productservice:
    build:
      context: ./product-service
      dockerfile: Dockerfile
    container_name: productservice
    ports:
      - "8081:8081"
    depends_on:
      mysql:
        condition: service_healthy
      redis:
        condition: service_started
    environment:
      DB_HOST: product-service-db
      DB_PORT: 3306
      DB_USER: root
      DB_PASSWORD: password
      REDIS_HOST: my-product-service-redis
    networks:
      - backend

  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    container_name: zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - backend
    healthcheck:
      test: [ "CMD", "nc", "-z", "localhost", "2181" ]
      interval: 10s
      timeout: 5s
      retries: 5

  kafka:
    image: confluentinc/cp-kafka:7.4.0
    container_name: kafka
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
    depends_on:
      zookeeper:
        condition: service_healthy
    networks:
      - backend
    healthcheck:
      test: [ "CMD", "kafka-broker-api-versions", "--bootstrap-server", "localhost:9092" ]
      interval: 10s
      timeout: 5s
      retries: 5

  postgres-user:
    image: postgres:15
    container_name: postgres-user-db
    environment:
      POSTGRES_DB: authserver
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: root
    ports:
      - "5432:5432"
    volumes:
      - postgres_user_data:/var/lib/postgresql/data
    networks:
      - backend
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres -d authserver" ]
      interval: 5s
      timeout: 5s
      retries: 5

  user-service:
    build:
      context:  ./user-service
      dockerfile: Dockerfile
    container_name: user-service
    ports:
      - "8080:8080"
    depends_on:
      postgres-user:
        condition: service_healthy
      kafka:
        condition: service_healthy
    environment:
      DATABASE_URL: jdbc:postgresql://postgres-user-db:5432/authserver
      DATABASE_USERNAME: postgres
      DATABASE_PASSWORD: root
      KEYSTORE_PASSWORD: password
      GOOGLE_CLIENT_ID: ${GOOGLE_CLIENT_ID}
      GOOGLE_CLIENT_SECRET: ${GOOGLE_CLIENT_SECRET}
    networks:
      - backend

  email-service:
    build:
      context: ./email-service
      dockerfile: Dockerfile
    container_name: email-service
    ports:
      - "8181:8181"
    depends_on:
      kafka:
        condition: service_healthy
    environment:
      SENDER_EMAIL: ${SENDER_EMAIL}
      SENDER_PASSWORD: ${SENDER_PASSWORD}
      KAFKA_BOOTSTRAP_SERVERS: kafka:9092
    networks:
      - backend
  payment-service:
    build:
      context: ./payment-service
      dockerfile: Dockerfile
    container_name: payment-service
    ports:
      - "8082:8082"
    environment:
      STRIPE_KEY: ${STRIPE_KEY}
    networks:
      - backend

volumes:
  mysql_data:
  postgres_user_data:

networks:
  backend:
    driver: bridge
